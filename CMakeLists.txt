CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

INCLUDE(CMakeDependentOption)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckSymbolExists)

PROJECT(YAAVG)

# default build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: Debug Release"
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# CMAKE_BUILD_TYPE can only be one of Debug or Release

SET(build_type_ok FALSE)
FOREACH(a "Debug" "Release")
	IF (${CMAKE_BUILD_TYPE} STREQUAL ${a})
		SET(build_type_ok TRUE)
	ENDIF (${CMAKE_BUILD_TYPE} STREQUAL ${a})
ENDFOREACH(a)

IF (NOT build_type_ok)
	MESSAGE(FATAL_ERROR "CMAKE_BUILD_TYPE can only be one of \"Debug\" or \"Release\"")
ENDIF (NOT build_type_ok)

IF (${YAKVS_BINARY_DIR} STREQUAL ${YAKVS_SOURCE_DIR})
	MESSAGE(FATAL_ERROR "In-tree-compile is not prefered.")
ENDIF (${YAKVS_BINARY_DIR} STREQUAL ${YAKVS_SOURCE_DIR})


IF (${YAAVG_BINARY_DIR} STREQUAL ${YAAVG_SOURCE_DIR})
	MESSAGE(FATAL_ERROR "In-tree-compile is not prefered.")
ENDIF (${YAAVG_BINARY_DIR} STREQUAL ${YAAVG_SOURCE_DIR})

IF (NOT CMAKE_COMPILER_IS_GNUCC)
	MESSAGE(FATAL_ERROR "Only accept GCC now")
ENDIF (NOT CMAKE_COMPILER_IS_GNUCC)


SET(MARCH ${CMAKE_SYSTEM_PROCESSOR} CACHE STRING
	"gcc -march option")
# Build types
SET(MARCH_CFLAGS "-march=${MARCH} -mtune=${MARCH}")
SET(CMAKE_C_FLAGS "-std=gnu99 -Wall -Wextra -D_GNU_SOURCE ${MARCH_CFLAGS}" CACHE
	STRING "Flags used by the compiler during all build types." FORCE)
SET(CMAKE_C_FLAGS_DEBUG "-g -rdynamic -O0 -DYAAVG_DEBUG" CACHE
	STRING "Flags used by the compiler during debug builds." FORCE)
SET(CMAKE_C_FLAGS_RELEASE "-O2" CACHE
	STRING "Flags used by the compiler during release builds." FORCE)

# Environment
CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES(alloca.h HAVE_ALLOCA_H)
IF (HAVE_ALLOCA_H)
	SET(HAVE_ALLOCA TRUE)
ENDIF (HAVE_ALLOCA_H)
CHECK_FUNCTION_EXISTS(atexit HAVE_ATEXIT)
CHECK_FUNCTION_EXISTS(sigaction HAVE_SIGACTION)
CHECK_INCLUDE_FILES(execinfo.h HAVE_EXECINFO_H)
CHECK_FUNCTION_EXISTS(backtrace HAVE_BACKTRACE)
CHECK_FUNCTION_EXISTS(mallinfo HAVE_MALLINFO)
CHECK_FUNCTION_EXISTS(malloc_stats HAVE_MALLOC_STATS)
CHECK_INCLUDE_FILES(stdbool.h HAVE_STDBOOL_H)
CHECK_INCLUDE_FILES(setjmp.h HAVE_SETJMP_H)
CHECK_SYMBOL_EXISTS(sigsetjmp setjmp.h HAVE_SIGSETJMP)
CHECK_FUNCTION_EXISTS(localtime_r HAVE_LOCALTIME_R)
SET(CMAKE_REQUIRED_LIBRARIES	"-lrt")
CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
IF (HAVE_CLOCK_GETTIME)
	LIST(APPEND ADDON_LIBS "-lrt")
ENDIF(HAVE_CLOCK_GETTIME)
CHECK_FUNCTION_EXISTS(nanosleep HAVE_NANOSLEEP)
CHECK_FUNCTION_EXISTS(vmsplice HAVE_VMSPLICE)


# SDL options
SET(USE_SDL TRUE CACHE BOOL "Whether to use SDL")
SET(USE_SDLIMAGE TRUE CACHE BOOL "Whether to use SDL_image")
IF (USE_SDL)
	MESSAGE(STATUS "Look for SDL")
	FIND_PACKAGE(SDL)
	IF (SDL_FOUND)
		SET(HAVE_SDL 1 CACHE INTERNAL "Have SDL support")

		IF (USE_SDLIMAGE)
			MESSAGE(STATUS "Look for SDL_image")
			FIND_PACKAGE(SDL_image)
			IF (SDLIMAGE_FOUND)
				SET(HAVE_SDLIMAGE 1 CACHE INTERNAL "Have SDL_image support")
			ELSE (SDLIMAGE_FOUND)
				SET(USE_SDLIMAGE FALSE CACHE BOOL "Whether to use SDL_image" FORCE)
			ENDIF (SDLIMAGE_FOUND)
		ENDIF (USE_SDLIMAGE)

	ENDIF (SDL_FOUND)
ELSE(USE_SDL)
	SET(USE_SDL FALSE CACHE BOOL "Whether to use SDL" FORCE)
	SET(HAVE_SDL FALSE)
	SET(USE_SDLIMAGE FALSE CACHE BOOL "Whether to use SDL_image" FORCE)
	SET(HAVE_SDLIMAGE FALSE)
ENDIF(USE_SDL)

SET(USE_OPENGL TRUE CACHE BOOL "Whether to use OpenGL video")
IF (USE_OPENGL)
	MESSAGE(STATUS "Look for OpenGL")
	FIND_PACKAGE(OpenGL)
	IF (OPENGL_FOUND)
		MESSAGE(STATUS "Look for X11")
		FIND_PACKAGE(X11)
		IF (X11_FOUND)
			SET(HAVE_OPENGL 1 CACHE INTERNAL "Have OpenGL support")
			SET(HAVE_X11 1 CACHE INTERNAL "Have X11 support")
			IF (X11_xf86misc_FOUND)
				SET(HAVE_XF86MISC 1 CACHE INTERNAL "Have xf86misc support")
			ENDIF (X11_xf86misc_FOUND)
			IF (X11_xf86misc_FOUND)
				SET(HAVE_XF86MISC 1 CACHE INTERNAL "Have xf86misc support")
			ENDIF (X11_xf86misc_FOUND)
			IF (X11_Xrandr_FOUND)
				SET(HAVE_XRANDR 1 CACHE INTERNAL "Have Xrandr support")
			ENDIF (X11_Xrandr_FOUND)
			IF (X11_xf86vmode_FOUND)
				SET(HAVE_XF86VMODE 1 CACHE INTERNAL "Have xf86vmode support")
			ENDIF (X11_xf86vmode_FOUND)
		ENDIF (X11_FOUND)
	ENDIF (OPENGL_FOUND)
ELSE(USE_OPENGL)
	SET(HAVE_OPENGL FALSE CACHE INTERNAL "Have OpenGL support")
	SET(HAVE_XF86MISC FALSE CACHE INTERNAL "Have xf86misc support")
	SET(HAVE_XRANDR FALSE CACHE INTERNAL "Have Xrandr support")
	SET(HAVE_XF86VMODE FALSE CACHE INTERNAL "Have xf86vmode support")
ENDIF(USE_OPENGL)

IF (HAVE_OPENGL)
	SET(USE_OPENGL3 TRUE CACHE BOOL "Whether to use OpenGL3 interface")
ELSE (HAVE_OPENGL)
	SET(USE_OPENGL3 FALSE CACHE BOOL "Whether to use OpenGL3 interface" FORCE)
ENDIF (HAVE_OPENGL)



MESSAGE(STATUS "Look for libpng12")
FIND_PACKAGE(PNG)
IF (PNG_FOUND)
	SET(HAVE_LIBPNG 1 CACHE INTERNAL "Have libPNG")
ENDIF(PNG_FOUND)

FIND_PACKAGE(ZLIB)
IF (ZLIB_FOUND)
	SET(HAVE_ZLIB 1 CACHE INTERNAL "Have zlib")
ENDIF (ZLIB_FOUND)

# Options

SET(BUILD_TESTS OFF CACHE BOOL
	"Whether to build tests")
IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	SET(BUILD_TESTS ON CACHE BOOL
		"Whether to build tests" FORCE)
ENDIF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")

OPTION(ENABLE_SCREENSHOT "Enable screenshot" ON)

# check environment

CONFIGURE_FILE(config.h.cmake.in config.h)

ADD_SUBDIRECTORY(src)

# vim:tabstop=4:shiftwidth=4

